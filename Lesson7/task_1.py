"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.

Сортировка должна быть реализована в
виде функции.

Обязательно доработайте алгоритм (сделайте его умнее)!

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение
Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.

Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""
import timeit
import random


# сортировка пузырьком по убыванию
def bubble_sort(lst_obj):
    n = 0
    while n < len(lst_obj):
        for i in range(len(lst_obj) - 1):
            if lst_obj[i] < lst_obj[i + 1]:
                lst_obj[i], lst_obj[i + 1] = lst_obj[i + 1], lst_obj[i]
        n += 1
    return lst_obj


# сортировка пузырьком с выходом из цикла
def bubble_sort_break(lst_obj):
    n = 0
    while n < len(lst_obj):
        count_changes = 0
        for i in range(len(lst_obj) - 1):
            if lst_obj[i] < lst_obj[i + 1]:
                lst_obj[i], lst_obj[i + 1] = lst_obj[i + 1], lst_obj[i]
            else:
                count_changes += 1
        if count_changes == len(lst_obj) - 1:
            break
        n += 1
    return lst_obj


# orig_list = [random.randint(-100, 100) for _ in range(1000)] # рандомный список
# orig_list=[x for x in range (1000,0,-1)] # полностью отсортированный список
# orig_list=[x for x in range (1000,500,-1)]+[random.randint(0, 500) for _ in range(500)] # наполовину отсортированный
# список


print('Замеры сортировка пузырьком по убыванию',
      timeit.timeit(
          "bubble_sort(orig_list[:])",
          globals=globals(),
          number=10))
# Замеры сортировка пузырьком по убыванию 0.8767105000000001
# Если уже отсортированный 0.6531435999999999
# С наполовину отсортированным списком 0.7013422

print('Замеры сортировка пузырьком по убыванию с выходом',
      timeit.timeit(
          "bubble_sort_break(orig_list[:])",
          globals=globals(),
          number=10))
# Замеры сортировка пузырьком по убыванию с выходом 1.0459455
# Если уже отсортированный 0.0009231000000000655
# С наполовину отсортированным списком 0.4537697999999999

# Оптимизация дает эффект только если список уже отсортирован или отсортирован наполовину, но если на вход принимается
# полностью рандомный список, то время выполнения даже увеличивается, на мой взгляд это происходит из за того, что при
# рандомном списке, количество циклов которые отсекает  команда break по своим времязатратам намного меньше,
# чем время,  которое PC затрачивает на увеличение переменной  count_changes , плюс сравнение этой переменной с
# длиной списка и так на каждом цикле до этого.
